* Mutual Reference

#+begin_src clojure
;; Data Definitions:
(defrecord elt [name data subs])
;; Element is (elt. String Integer ListOfElement)
;; interp. An element in the file system, with name, and EITHER data or subs.
;;         If data is 0, then subs is considered to be list of sub elements.
;;         If data is not 0, then subs is ignored.

;; ListOfElement is one of:
;; - empty
;; - (cons Element ListOfElement)
;; interp. A list of file system Elements

;; Examples:
(def F1 (elt. "F1" 1 (empty '())))
(def F2 (elt. "F2" 2 (empty '())))
(def F3 (elt. "F3" 3 (empty '())))
(def D4 (elt. "D4" 0 (list F1 F2)))
(def D5 (elt. "D5" 0 (list F3)))
(def D6 (elt. "D6" 0 (list D4 D5)))
#+end_src

Notice the reference from the definition of Element to ListOfElement and vice versa. That is *mutual reference*.

Combined, we also have self-reference.

** Template for Functions

#+begin_src clojure
(defn fn-for-element [e]
    (... (:name e)                  ; String
         (:data e)                  ; Integer
         (fn-for-loe (:subs e)))    ; ListOfElements
    )

(defn fn-for-loe [loe]
    (cond (empty? loe) (...)
          :else (... (fn-for-element (first loe))   ; Natural Mutual Recursion
                     (fn-for-loe (rest loe)))))     ; Natural Recursion
#+end_src

** Designing a Function on Arbitrary Arity Trees

*** First Function

Design a function that consumes Element and produces the sum of all data in the tree.

#+begin_src clojure
;; Functions:
;; Element -> Integer
;; ListOfElement -> Integer???
;; produce the sum of all the data in element (and its subs)
;; Stub: (defn sum-data--element [e] 0)
;; Stub: (defn sum-data--loe [loe] 0)
;; Examples
(is (= 1 (sum-data--element F1)))
(is (= 0 (sum-data--loe (empty '()))))
(is (= 3 (sum-data--element D5)))
(is (= (+ 1 2) (sum-data--element D4)))
(is (= (+ 1 2 3) (sum-data--element D6)))

;; Templates: from data definition
;; Code body
(ns test-problem
    (:require [clojure.test :refer :all]))

(defn sum-data--element [e]
    (if (zero? (:data e))
        (sum-data--loe (:subs e))
        (:data e))))

(defn sum-data--loe [loe]
    (cond (empty? loe) 0
          :else (+ (sum-data--element (first loe))
                   (sum-data--loe (rest loe)))))

;; Test and Debug
(deftest tester-sum
    (is (= 1 (sum-data--element F1)))
    (is (= 0 (sum-data--loe (empty '()))))
    (is (= 3 (sum-data--element D5)))
    (is (= (+ 1 2) (sum-data--element D4)))
    (is (= (+ 1 2 3) (sum-data--element D6))))

(run-tests 'test-problem)
#+end_src

*** Second Function

Design a function that consumes Element and produces a list of the names of all the elements in the tree.

#+begin_src clojure
;; Signature (data types):
;; Element          -> ListOfString
;; ListOfElement    -> ListOfString     
;; Purpose: produce a list of the names of all elements in the tree
;; Stub (function definition that produces a dummy result):
;; (defn all-names--element [e] (empty '()))
;; (defn all-names--loe [loe] (empty '()))
;; Examples
(is (= (empty '()) (all-names--loe (empty '()))))
(is (= (list "F1") (all-names--element F1)))
(is (= (list "D5" "F3") (all-names--element D5)))
(is (= (list "D4" "F1" "F2") (all-names--element D4)))
(is (= (concat (list "D4" "F1" "F2") (list "D5" "F3")) (all-names--loe (list D4 D5))))
(is (= (list "D6" "D4" "F1" "F2" "D5" "F3") (all-names--element D6)))
;; Template: from data definition
;; Code body
(defn all-names--element [e]
    (cons (:name e)
          (all-names--loe (:subs e)))
    )

(defn all-names--loe [loe]
    (cond (empty? loe) (empty '())
          :else (concat (all-names--element (first loe))
                        (all-names--loe (rest loe)))))
;; Test and Debug
(deftest tester-all-names
    (is (= (empty '()) (all-names--loe (empty '()))))
    (is (= (list "F1") (all-names--element F1)))
    (is (= (list "D5" "F3") (all-names--element D5)))
    (is (= (list "D4" "F1" "F2") (all-names--element D4)))
    (is (= (concat (list "D4" "F1" "F2") (list "D5" "F3")) (all-names--loe (list D4 D5))))
    (is (= (list "D6" "D4" "F1" "F2" "D5" "F3") (all-names--element D6))))
#+end_src

** Backtracking Search

PROBLEM:
Design a function that consumes String and Element and looks for a data element with the given name.
If it finds that element it produces the data, otherwise it produces false.

#+begin_src clojure
;; String, Element -> Integer or false
;; String, ListOfElement -> Integer or false
;; Search the given tree for an element with the given name, produce data if found; false otherwise

;; Stubs:
;; (defn find--element [n e] false)
;; (defn find--loe [n loe] false)

;; Examples:
(is (= false (find--loe "F3" (empty '()))))
(is (= false (find--element "F3" F1)))
(is (= 3 (find--element "F3" F3)))
(is (= 2 (find--loe "F2" (cons F1 (cons F2 (empty '()))))))
(is (= false (find--loe "F3" (cons F1 (cons F2 (empty '()))))))
(is (= false (find--element "F3" D4)))
(is (= 1 (find--element "F1" D4)))
(is (= 2 (find--element "F2" D4)))
(is (= 0 (find--element "D4" D4)))
(is (= 3 (find--element "F3" D6)))

;; Template: from data definition
;; Code body
(defn find--element [n e]
    (if (= n (:name e))
        (:data e)
        (find--loe n (:subs e))))

(defn find--loe [n loe]
    (cond (empty? loe) false
          :else (if (not (false? (find--element n (first loe))))
                    (find--element n (first loe))
                    (find--loe n (rest loe)))))

(deftest finder
    (is (= false (find--loe "F3" (empty '()))))
    (is (= false (find--element "F3" F1)))
    (is (= 3 (find--element "F3" F3)))
    (is (= 2 (find--loe "F2" (cons F1 (cons F2 (empty '()))))))
    (is (= false (find--loe "F3" (cons F1 (cons F2 (empty '()))))))
    (is (= false (find--element "F3" D4)))
    (is (= 1 (find--element "F1" D4)))
    (is (= 2 (find--element "F2" D4)))
    (is (= 0 (find--element "D4" D4)))
    (is (= 3 (find--element "F3" D6))))
#+end_src