* Naturals

** Sum and List of Naturals

Now that we understand how to form data definitions for abitrary-sized data we can look at how to design functions that "count down" on natural numbers.  Here's the key inight - ask yourself how many natural numbers are there?

A lot, many... an arbitrary number:
#+begin_src clojure
0                      ;0
(succ 0)               ;1
(succ (succ 0))        ;2
(succ (succ (succ 0))) ;3
#+end_src
and so on.

What that is saying is that (succ <some natural>) produces a natural, similarly (sub1 <some natural other than 0>) produces a natural.

So succ is kind of like cons, it takes a natural and makes a bigger one  (cons makes a longer list). And sub1 is kind of like rest it takes a natural (other than 0) and gives the next smallest one (rest gives shorter list).
                                                                      
Consider this type comment:

#+begin_src clojure
;; Natural is one of:
;;  - 0
;;  - (succ Natural)
;; interp. a natural number

(def N0 0)         ;0
(def N1 (succ N0)) ;1
(def N2 (succ N1)) ;2

(defn fn-for-natural [n]
  (cond (zero? n) (...)
        :else
            (... n                       ;template rules wouldn't normally put this
            ;                            ;here, but we will see that we end up coming
            ;                            ;back to add it
            (fn-for-natural (sub1 n)))]))

;; Template rules used:
;;  - one-of: two cases
;;  - atomic distinct: 0
;;  - compound: (succ Natural)
;;  - self-reference: (sub1 n) is Natural
#+end_src

PROBLEMs:
(A) Design a function that consumes Natural number n and produces the sum of all
    the naturals in [0, n]. 
(B) Design a function that consumes Natural number n and produces a list of all
    the naturals of the form (cons n (cons n-1 ... empty)) not including 0.

Part A:

#+begin_src clojure
;; Natural -> Natural
;; Produce sum of Natural[0, n]
; (defn sum [n] 0)
(is (= 0 (sum 0)))
(is (= 1 (sum 1)))
(is (= 6 (sum 3)))

(defn sum [n]
  (cond (zero? n) 0
        :else
            (+ n
               (sum (dec n)))))

;; Test and Debug
(ns test-problem
    (:require [clojure.test :refer :all]))

(deftest testSum
    (is (= 0 (sum 0)))
    (is (= 1 (sum 1)))
    (is (= 6 (sum 3))))

(run-tests 'test-problem)
#+end_src

Part B:

#+begin_src clojure
;; Natural -> ListOfNatural 
;; Produce (cons n (cons n-1 ... empty)) not including 0
;; (defn toList [n] (empty '()))
(is (= (empty '()) (toList 0)))
(is (= (cons 1 (empty '())) (toList 1)))
(is (= (cons 2 (cons 1 (empty '()))) (toList 2)))

;; Code body
(ns test-problem
    (:require [clojure.test :refer :all]))

(defn toList [n]
  (cond (zero? n) (empty '())
        :else
            (cons n
                  (toList (dec n)))))


;; Test and debug
(deftest testToList
    (is (= (empty '()) (toList 0)))
    (is (= (cons 1 (empty '())) (toList 1)))
    (is (= (cons 2 (cons 1 (empty '()))) (toList 2))))

(run-tests 'test-problem)
#+end_src

** Defining Natural Numbers

PROBLEM:
Your friend has just given you a new pad, and it runs a prototype version of Racket. 
This is great, you can make it do anything. There's just one problem, this version of racket doesn't include numbers as primitive data. There just are no numbers in it! But you need natural numbers to write your next program.
No problem you say, because you remember the well-formed self-referential data definition for Natural, as well as the idea that add1 is kind of like cons, and sub1 is kind of like rest. Your idea is to make add1 actually be cons, and sub1 actually be rest...

#+begin_src clojure
;; NATURAL is one of:
;; - empty
;; - (cons "!" NATURAL)
;; interp. a natural number, the number "!" in the list is the number
(def N0 (empty '()))    ; 0
(def N1 (cons "!" N0))  ; 1
(def N2 (cons "!" N1))  ; 2
(def N3 (cons "!" N2))  ; 3
(def N4 (cons "!" N3))  ; 4
(def N5 (cons "!" N4))  ; 5
(def N6 (cons "!" N5))  ; 6
(def N7 (cons "!" N6))  ; 7
(def N8 (cons "!" N7))  ; 8
(def N9 (cons "!" N8))  ; 9

;; Primitives that operate NATURAL:
(defn ZERO? [n] (empty? n))     ; Anything      -> Boolean
(defn ADD1 [n] (cons "!" n))    ; NATURAL       -> NATURAL
(defn SUB1 [n] (rest n))        ; NATURAL[>0]   -> NATURAL

(defn fnForNAT [n]
    (cond (ZERO?) (...)
          :else (... n
                     (fnForNAT (SUB1 n)))))

;; NATURAL, NATURAL -> NATURAL
;; Produce a + b
;; (defn ADD [a b] N0)
(is (= N2 (ADD N2 N0)))
(is (= N3 (ADD N0 N3)))
(is (= N7 (ADD N3 N4)))
(defn ADD [a b]
    (cond (ZERO? b) a
          :else (ADD (ADD1 a) (SUB1 b))))

;; Test and debug
(ns test-problem
    (:require [clojure.test :refer :all]))
    
(deftest testADD
    (is (= N2 (ADD N2 N0)))
    (is (= N3 (ADD N0 N3)))
    (is (= N7 (ADD N3 N4))))

(run-tests 'test-problem)

;; NATURAL, NATURAL -> NATURAL
;; Produce a - b
;; (defn SUBTRACT [a b] N0)
(is (= N2 (SUBTRACT N2 N0)))
(is (= N4 (SUBTRACT N6 N2)))
(defn SUBTRACT [a b]
    (cond (ZERO? b) a
          :else (SUBTRACT (SUB1 a) (SUB1 b))))

;; Test and debug
(ns test-problem
    (:require [clojure.test :refer :all]))
    
(deftest testSUB
    (is (= N2 (SUBTRACT N2 N0)))
    (is (= N4 (SUBTRACT N6 N2))))

(run-tests 'test-problem)

;; NATURAL -> NATURAL
;; Produce n*(n-1)*...*1
;; (defn SUBTRACT [a b] N0)
(is (= N1 (FACT N0)))
(is (= N1 (FACT N1)))
(is (= N6 (FACT N3)))

(defn FACT [n]
    (cond (ZERO? n) N1
          :else (TIMES n (FACT (SUB1 n))))) ;; TIMES is not yet defined!
#+end_src

** Problem: Odd from n

PROBLEM:
Design a function called odd-from-n that consumes a natural number n, and produces a list of all the odd numbers from n down to 1. 
Note that there is a primitive function, odd?, that produces true if a natural number is odd.

#+begin_src clojure
;; Signature (data types): natural -> ListOfNatural
;; Purpose: produces a list of all odd numbers (n, n-1, ..., 1)
;; Stub (function definition that produces a dummy result): (defn odd-from-n [n] 1)

;; Examples
(is (= (empty '()) (odd-from-n 0)))
(is (= (cons 1 (empty '())) (odd-from-n 1)))
(is (= (cons 3 (cons 1 (empty '()))) (odd-from-n 3)))
(is (= (cons 3 (cons 1 (empty '()))) (odd-from-n 4)))

;; Template: From data definition

;; Code body
(defn odd-from-n [n]
  (cond (zero? n) (empty '())
        (odd? n) (cons n (odd-from-n (dec n)))
        :else (odd-from-n (dec n))))

;; Test and Debug
(ns test-problem
    (:require [clojure.test :refer :all]))
    
(deftest testOdd
    (is (= (empty '()) (odd-from-n 0)))
    (is (= (cons 1 (empty '())) (odd-from-n 1)))
    (is (= (cons 3 (cons 1 (empty '()))) (odd-from-n 3)))
    (is (= (cons 3 (cons 1 (empty '()))) (odd-from-n 4))))

(run-tests 'test-problem)
#+end_src