#+TITLE: Graphs
#+AUTHOR: Adair Antonio da Silva Neto
#+DATE: \today

Directed: arrows go in only one direction.
Cyclic: cycles can exist

#+begin_src clojure

  (defrecord room [name exists])
  ;; Room is (room. String (listof Room))
  ;; interp. the room's name, and list of room s that the exists lead to

  ;; Use loom for digraphs!!!

  (def H1
    {:A {:B}
     :B {}})

  (def H2
    {:A {:B}
     :B {:A}})

  (def H3
    {:A {:B}
     :B {:C}
     :C {:A}})

  (def H4
    {:A {:B :D}
     :B {:C :E}
     :C {:B}
     :D {:E}
     :E {:A}
     :F {}})

  ;; Template: structural recursion, encapsulate w/ local, tail-recursive w/ worklist,
  ;; context-preserving accumulator what rooms have we already visited

  (defn fn-for-house [r0]
    ;; todo is (listof Room); a worklist accumulator
    ;; visited is (listof String); a context preserving accumulator, names of rooms already visited
    (letfn [(fn-for-room [r todo visited]
              (if (contains? visited (room-name r))
                (fn-for-lor todo visited)
                (fn-for-lor (concat (room-exists r) todo)
                            (cons (room-name r) visited))))
            (fn-for-lor [todo visited]
              (cond (empty? todo) (...)
                    :else (fn-for-room (first todo)
                                       (rest todo)
                                       visited)))]
      (fn-for-room r0 '() '())))

  ;; Room, String -> Boolean
  ;; Produces true if starting at r0 it is possible to reach a room named rn
  ;; (defn reachable? [r0 rn] false)

  (defn reachable? [r0 rn]
    ;; todo is (listof Room); a worklist accumulator
    ;; visited is (listof String); a context preserving accumulator, names of rooms already visited
    (letfn [(fn-for-room [r todo visited]
              (if (= (room-name r) rn)
                true
                (if (contains? visited (room-name r))
                  (fn-for-lor todo visited)
                  (fn-for-lor (concat (room-exists r) todo)
                              (cons (room-name r) visited)))))
              (fn-for-lor [todo visited]
                          (cond (empty? todo) false
                                :else (fn-for-room (first todo)
                                                   (rest todo)
                                                   visited)))]
            (fn-for-room r0 '() '())))

    (deftest tester
      (is (= (reachable? H1 "A") true))
      (is (= (reachable? H1 "B") true))
      (is (= (reachable? H1 "C") false))
      (is (= (reachable? H4 "F") true)))
#+end_src
