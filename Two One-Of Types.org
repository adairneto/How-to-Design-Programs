* Two One-of Types

Design a function that consumes two lists of strings and produces true if the first list is a prefix of the second.

#+begin_src clojure
      ;; Data definitions:

      ;; ListOfString is one of:
      ;; - empty
      ;; - (cons String ListOfString)
      ;; interp. a list of strings
      (ns test-problem
        (:require [clojure.test :refer :all]))

      (def LS0 (empty '()))
      (def LS1 (cons "a" (empty '())))
      (def LS2 (cons "a" (cons "b" (empty '()))))
      (def LS3 (cons "c" (cons "b" (cons a (empty '())))))

      (defn fn-for-los [los]
        (cond (empty? los) (...)
              (... (first los)
                   (fn-for-los (rest los)))))

      ;; Functions:
      ;; ListOfStrings, ListOfStrings -> Boolean
      ;; produce true if lsta is a prefix of lstb
      ;; (defn prefix=? [lsta lstb] false) ;stub

      ;; Using cross product of type comments:

      ;; A possible definition
      (defn prefix=? [lsta lstb]
        (cond (and (empty? lsta) (empty? lstb)) (...)
              (and (cons? lsta) (empty? lstb)) (... lsta)
              (and (empty? lsta) (cons? lstb)) (... lstb)
              (and (cons? lsta) (cons? lstb)) (... lsta lstb)))

      ;; A better way
      (defn prefix=? [lsta lstb]
        (cond (empty? lsta) true
              (empty? lstb) false
              :else (and (= (first lsta) (first lstb))
                         (prefix=? (rest lsta) (rest lstb)))))

      ;; Using cross product of type comments:
      (deftest test-prefix
        (is (= true (prefix=? (empty '()) (empty '()))))
        (is (= false (prefix=? (list "x") (empty '()))))
        (is (= true (prefix=? (empty '()) (list "x"))))
        (is (= true (prefix=? (list "x") (list "x"))))
        (is (= false (prefix=? (list "x") (list "y"))))
        (is (= true (prefix=? (list "x" "y") (list "x" "y"))))
        (is (= false (prefix=? (list "x" "x") (list "x" "y"))))
        (is (= true (prefix=? (list "x") (list "x" "y"))))
        (is (= false (prefix=? (list "x" "y" "z") (list "x" "y")))))

      (run-tests 'test-problem)
#+end_src

#+RESULTS:
| #'test-problem/LS0                                     |
| #'test-problem/LS1                                     |
| #'test-problem/LS2                                     |
| class clojure.lang.Compiler$CompilerException          |
| class clojure.lang.Compiler$CompilerException          |
| class clojure.lang.Compiler$CompilerException          |
| #'test-problem/prefix=?                                |
| #'test-problem/test-prefix                             |
| {:test 2, :pass 18, :fail 0, :error 0, :type :summary} |

PROBLEM:

Design the function merge. It consumes two lists of numbers, which it assumes are each sorted in ascending order. It produces a single list of all the numbers, also sorted in ascending order. 

Your solution should explicitly show the cross product of type comments table, filled in with the values in each case. Your final function should have a cond with 3 cases. You can do this simplification using the cross product table by 
recognizing that there are subtly equal answers. 

Hint: Think carefully about the values of both lists. You might see a way to change a cell content so that 2 cells have the same value.

Cross product:

lsta   lstb
Empty  Empty
Empty  cons
cons   Empty
cons   cons

#+begin_src clojure
  ;; Data Definition

  ;; ListOfInt is one of:
  ;; - empty
  ;; - (cons Int ListOfInt)
  ;; interp. a list of integers
  (ns test-problem
    (:require [clojure.test :refer :all]))

  (def LS0 (empty '()))
  (def LS1 (cons 1 (empty '())))
  (def LS2 (cons 1 (cons 2 (empty '()))))
  (def LS3 (cons 3 (cons 2 (cons 1 (empty '())))))

  (defn fn-for-loi [loi]
      (cond (empty? loi) (...)
            (... (first loi)
                 (fn-for-loi (rest loi)))))

  ;; Functions:

  ;; ListOfInt, ListOfInt -> ListOfInt
  ;; Assumption: lists are in ascending order
  ;; produces a sorted single list
  (defn merge [lsta lstb]
    (cond (empty? lsta) lstb
          (empty? lstb) lsta
          :else (if (< (first lsta) (first lstb))
                    (cons (first lsta) (merge (rest lsta) lstb))
                    (cons (first lstb) (merge lsta (rest lstb))))))

  (deftest test-merge
    (is (= (empty '()) (merge (empty '()) (empty '()))))
    (is (= (list 1) (merge (empty '()) (list 1))))
    (is (= (list 1) (merge (list 1) (empty '()))))
    (is (= (list 1 2) (merge (list 1) (list 2))))
    (is (= (list 1 2 3 4) (merge (list 1 2) (list 3 4))))
    (is (= (list 1 2 3 4 5 6) (merge (list 1 3 5) (list 2 4 6)))))

  (run-tests 'test-problem)
#+end_src

#+RESULTS:
| #'test-problem/LS0                                    |
| #'test-problem/LS1                                    |
| #'test-problem/LS2                                    |
| #'test-problem/LS3                                    |
| class clojure.lang.Compiler$CompilerException         |
| #'test-problem/merge                                  |
| #'test-problem/test-merge                             |
| {:test 1, :pass 6, :fail 0, :error 0, :type :summary} |
